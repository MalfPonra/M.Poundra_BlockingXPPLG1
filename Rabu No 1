import turtle

def drawSquare(ttl, x, y, length):
    ttl.penup()  # Raise the pen
    ttl.goto(x, y)  # Move to the starting position
    ttl.setheading(0)  # Point turtle east
    ttl.pendown()  # Lower the pen
    for count in range(4):  # Draw 4 sides
        ttl.forward(length)  # Move forward by 'length'
        ttl.right(90)  # Turn right by 90 degrees
    ttl.penup()  # Raise the pen

# Create a turtle named Bob
Bob = turtle.Turtle()
Bob.speed(10)  # Make Bob crawl fast
Bob.pensize(3)  # Line width of 3 pixels

# Draw a square at (0, 0) with side length 100
drawSquare(Bob, 0, 0, 100)

turtle.done()  # Keep the drawing showing


import turtle

# Set up the turtle screen and background color
screen = turtle.Screen()
screen.bgcolor("white")

# Create a new turtle and set its speed
pen = turtle.Turtle()
pen.speed(0)

# Set the fill color to red and start filling
pen.fillcolor("red")
pen.begin_fill()

# Draw a circle with a radius of 100 pixels
pen.circle(100)

# End the fill and hide the turtle
pen.end_fill()
pen.hideturtle()

# Keep the turtle window open until manually closed
turtle.done()



import turtle
def tangentCircles (ttl):
    """
    Print 10 tangent circles
    """
    r = 10 # initial radius
    n = 10 # count of circles
    for i in range (1, n + 1, 1):
        ttl.circle (r*i)
def concentricCircles ( ttl ):
    """
    Print 10 concentric circles
    """
    r = 10 # initial radius
    for i in range (10):
        ttl.circle (r*i)
        ttl.up()
        ttl.sety ((r * i) * (-1))
        ttl.down()
Ben = turtle.Turtle ()
Ben.up(); Ben.goto(0, 150)
Ben.down(); Ben.pencolor("Blue")
tangentCircles (Ben)
Ben.up(); Ben.goto(0, -150)
Ben.down(); Ben.pencolor("Red")
concentricCircles (Ben)



#curve as 10 (relative)
tt.bgcolor('black')
tt.pensize(2)
tt.speed(10)
# Iterate six times in total
for i in range(6):
  # Choose your color combination
  for color in ('red', 'magenta', 'blue',
  'cyan', 'green', 'white',
  'yellow'):
    tt.color(color)
    # Draw a circle of chosen size, 100 here
    tt.circle(100)
    # Move 10 pixels left to draw another circle
    tt.left(10)
    # Hide the cursor(or turtle) which drew the circle
    tt.hideturtle()



import turtle as t
import colorsys as cs

# Mengatur kecepatan turtle
t.speed(10)
t.setup(800,800)
t.tracer(10)
t.width(2)
t.bgcolor("black")
for j in range (25):
  for i in range (15):
    t.color(cs.hsv_to_rgb(i/15, j/25,1))
    t.right(90)
    t.circle(200-j*4,90)
    t.left(90)
    t.circle(200-j*4,90)
    t.right(180)
    t.circle(50,24)
t.hideturtle()
t.done()


import turtle
from PIL import Image

def save_as_jpg(canvas, fileName):
    # same as before
    pass

def drawRectangle(ttl, x, y, width, height):
    """ Draw a rectangle of dimensions width and height, with upper """
    ttl.up()
    ttl.goto(x, y)
    ttl.setheading(0)
    ttl.down()
    for i in range(2):
        ttl.forward(width)
        ttl.right(90)
        ttl.forward(height)
    ttl.up()
    ttl.right(90)

def drawTriangle(ttl, x1, y1, x2, y2, x3, y3):
    ttl.penup()
    ttl.goto(x1, y1)
    ttl.pendown()
    ttl.goto(x2, y2)
    ttl.goto(x3, y3)
    ttl.goto(x1, y1)
    ttl.penup()

def fillTriangle(ttl, x1, y1, x2, y2, x3, y3, color):
    # This assumes color is given as a Hex string value.
    ttl.fillcolor(color)
    ttl.begin_fill()
    drawTriangle(ttl, x1, y1, x2, y2, x3, y3)
    ttl.end_fill()

# set up the screen size (in pixels - 1000 x 1000)
# set the starting point of the turtle (0, 0)
turtle.setup(1500, 1000, 0, 0)
myBlue = "#003882"
myYellow = "#FCD647"
myRed = "#D12421"
myGreen = "#007336"
myWhite = "#FFFFFF"
Joe = turtle.Turtle()
Joe.screen.colormode(255)
drawRectangle(Joe, 0, 300, 600, 300)
Joe.goto(0, 0)
# draw blue triangle
fillTriangle(Joe, 0, 0, 0, 300, 200, 300, myBlue)
# draw yellow triangle
fillTriangle(Joe, 0, 0, 200, 300, 400, 300, myYellow)
# draw red triangle
fillTriangle(Joe, 0, 0, 400, 300, 600, 300, myRed)
# draw white triangle
fillTriangle(Joe, 0, 0, 600, 300, 600, 150, myWhite)
# draw green triangle
fillTriangle(Joe, 0, 0, 600, 150, 600, 0, myGreen)
Joe.hideturtle()
ts = turtle.getscreen()
tc = ts.getcanvas()
# creates a postscript image file
# substitute your own filename
tc.postscript(file="SeychellesFlag.eps")
# converts to JPEG
save_as_jpg(tc, "SeychellesFlag")
turtle.done()



# Python program to user input pattern
# using Turtle Programming
import turtle #Outside_In
import turtle
import time
import random

print ("This program draws shapes based on the number you enter in a uniform pattern.")
num_str = input("Enter the side number of the shape you want to draw: ")
if num_str.isdigit():
    squares = int(num_str)

angle = 180 - 180*(squares-2)/squares

turtle.up
x = 0
y = 0
turtle.setpos(x, y)

numshapes = 8
for x in range(numshapes):
    turtle.color(random.random(), random.random(), random.random())
    x += 5
    y += 5
    turtle.forward(x)
    turtle.left(y)
    for i in range(squares):
        turtle.begin_fill()
        turtle.forward(40)
        turtle.left(angle)
        turtle.forward(40)
        print (turtle.pos())
        turtle.up()
        turtle.end_fill()
        turtle.down()
time.sleep(11)
turtle.bye()
